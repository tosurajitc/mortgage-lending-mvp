create virtual environment: python -m venv .venv
Activate virtual environment: .venv\Scripts\activate
How to activate .env file: pip install python-dotenv then from dotenv import load_dotenv then add this function load_dotenv()  # Load variables from .env into the environment
Run the requirement.txt file: pip install -r requirements.txt
create requirement.txt file: pip freeze > requirements.txt
to run the program : streamlit run main.py

GIT PUSH Steps: 
In the terminal, initialize a new Git repository: git init
Add all files in your folder to the staging area: git add .
Commit the files with a message: git commit -m "Initial commit"
Link your local repository to the GitHub repository you mentioned (first time required): git remote add origin https://github.com/tosurajitc/mortgage-lending-mvp.git
Push the changes to the remote repository: git push -u origin master

If git hub fails then:
git remote rename origin old-origin
git remote add origin https://github.com/tosurajitc/mortgage-lending-mvp.git




mortgage-lending-mvp/
│
├── src/                              # Primary source code directory
│   ├── __init__.py
│   │
│   ├── agents/                       # AI Agent implementations
│   │   ├── __init__.py
│   │   ├── base_agent.py             # Base class for all agents
│   │   ├── orchestrator.py           # Central coordination agent
│   │   ├── document_agent.py         # Document processing agent
│   │   ├── underwriting_agent.py     # Loan underwriting agent
│   │   ├── compliance_agent.py       # Regulatory compliance agent
│   │   └── customer_agent.py         # Customer service agent
│   │
│   ├── autogen/                      # AutoGen multi-agent framework integration
│   │   ├── __init__.py
│   │   ├── agent_factory.py          # Agent creation utilities
│   │   ├── reasoning_agents.py       # Specialized reasoning agents
│   │   └── collaboration/            # Agent collaboration components
│   │       ├── __init__.py
│   │       ├── manager.py            # Collaboration management
│   │       └── agent.py              # Collaborative agent base class
│   │
│   ├── semantic_kernel/              # Semantic Kernel integration
│   │   ├── __init__.py
│   │   ├── kernel_setup.py           # Kernel initialization
│   │   ├── plugins/                  # Semantic skills and plugins
│   │   │   ├── document_plugin/      # Document processing skills
│   │   │   ├── underwriting_plugin/  # Underwriting skills
│   │   │   ├── compliance_plugin/    # Compliance checking skills
│   │   │   └── customer_plugin/      # Customer interaction skills
│   │   └── prompts/                  # Prompt templates
│   │       └── templates.json
│   │
│   ├── copilot/                      # Copilot Studio integration
│   │   ├── __init__.py
│   │   ├── actions/                  # Custom Copilot actions
│   │   │   ├── application_actions.py
│   │   │   └── document_actions.py
│   │   ├── conversation_flows/       # Conversation management
│   │   │   ├── application_flow.py
│   │   │   └── status_flow.py
│   │   └── entity_mappings.py        # Entity recognition
│   │
│   ├── data/                         # Data management
│   │   ├── __init__.py
│   │   ├── models.py                 # Data models
│   │   ├── cosmos_manager.py         # Cosmos DB integration
│   │   ├── blob_storage.py           # Blob storage management
│   │   └── mock_data_generator.py    # Test data generation
│   │
│   ├── security/                     # Security components
│   │   ├── __init__.py
│   │   ├── validation.py             # Input validation
│   │   ├── pii_detector.py           # PII detection
│   │   ├── jailbreak_prevention.py   # Prompt security
│   │   ├── access_control.py         # Role-based access
│   │   └── audit_logger.py           # Security logging
│   │
│   ├── workflow/                     # Workflow management
│   │   ├── __init__.py
│   │   ├── state_manager.py          # Application state tracking
│   │   ├── task_router.py            # Task routing
│   │   ├── decision_tracker.py       # Decision logging
│   │   └── error_recovery.py         # Error handling
│   │
│   ├── utils/                        # Utility modules
│   │   ├── __init__.py
│   │   ├── config.py                 # Configuration management
│   │   ├── logging_utils.py          # Logging utilities
│   │   └── exceptions.py             # Custom exceptions
│   │
│   ├── api/                          # API layer
│   │   ├── __init__.py
│   │   ├── app.py                    # FastAPI application
│   │   ├── endpoints.py              # API route definitions
│   │   ├── middleware.py             # API middleware
│   │   └── schemas.py                # Pydantic models
│   │
│   └── middleware/                   # Custom middleware
│       ├── __init__.py
│       ├── authentication.py
│       └── rate_limiting.py
│
├── tests/                            # Test suite
│   ├── __init__.py
│   ├── unit/                         # Unit tests
│   │   ├── test_agents/
│   │   ├── test_security/
│   │   └── test_workflow/
│   └── integration/                  # Integration tests
│       ├── test_end_to_end.py
│       └── test_agent_collaboration.py
│
├── mock_data/                        # Mock data generators
│   ├── __init__.py
│   ├── generators/                   # Data generation utilities
│   │   ├── applicant_generator.py
│   │   ├── document_generator.py
│   │   └── loan_generator.py
│   └── templates/                    # Data templates
│       ├── bank_statement.json
│       └── credit_report.json
│
├── scripts/                          # Utility scripts
│   ├── setup_azure.py                # Azure resource setup
│   ├── generate_test_data.py         # Test data generation
│   ├── run_demo.py                   # Demo execution script
│   └── deployment_helper.py          # Deployment utilities
│
├── config/                           # Configuration files
│   ├── app_config.json               # Main application config
│   ├── security_config.json          # Security settings
│   ├── logging_config.json           # Logging configuration
│   └── azure_config.json             # Azure-specific configurations
│
├── docs/                             # Project documentation
│   ├── architecture.md               # System architecture overview
│   ├── agent_design.md               # Agent design details
│   ├── api_reference.md              # API documentation
│   └── deployment_guide.md           # Deployment instructions
│
├── deployment/                       # Deployment configurations
│   ├── docker/                       # Docker containerization
│   │   ├── Dockerfile
│   │   └── docker-compose.yml
│   ├── kubernetes/                   # Kubernetes deployment
│   │   ├── deployment.yaml
│   │   └── service.yaml
│   └── azure/                        # Azure deployment templates
│       ├── main.bicep
│       └── parameters.json
│
├── notebooks/                        # Jupyter notebooks
│   ├── data_exploration.ipynb
│   └── model_analysis.ipynb
│
├── logs/                             # Log storage directory
│   └── .gitignore                    # Ignore actual log files
│
├── requirements.txt                  # Python dependencies
├── setup.py                          # Package setup script
├── .env.example                      # Example environment variables
├── .env                              # Actual environment variables (git-ignored)
├── .gitignore                        # Git ignore configuration
├── README.md                         # Project overview and setup instructions
└── LICENSE                           # Project licensing

